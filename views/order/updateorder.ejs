<%- include('../includes/head.ejs') -%>
<%- include('../includes/navigation.ejs') -%>

<!-- Add CSS Libraries -->
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/@ttskch/select2-bootstrap4-theme@1.3.4/dist/select2-bootstrap4.min.css" rel="stylesheet">

<style>
  :root {
    --primary: #4d8da9;
    --primary-light: #61A3C0;
    --success: #1cc88a;
    --success-dark: #17a673;
    --danger: #e74a3b;
    --light: #f8f9fc;
    --dark: #5a5c69;
    --gray: #e9ecef;
  }

  .order-card {
    border: none;
    border-radius: 12px;
    box-shadow: 0 6px 18px rgba(0, 0, 0, 0.08);
    overflow: hidden;
  }

  .card-header-custom {
    background: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%);
    color: white;
    padding: 1.5rem;
    border-bottom: none;
  }

  .card-header-custom h3 {
    font-weight: 600;
    margin: 0;
    display: flex;
    align-items: center;
  }

  .card-header-custom i {
    margin-right: 12px;
    font-size: 1.5rem;
  }

  .section-title {
    font-weight: 600;
    color: var(--dark);
    position: relative;
    padding-bottom: 12px;
    margin-bottom: 25px;
    display: flex;
    align-items: center;
  }

  .section-title:after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 50px;
    height: 3px;
    background: linear-gradient(90deg, var(--primary), var(--primary-light));
    border-radius: 3px;
  }

  .section-title i {
    margin-right: 10px;
    color: var(--primary);
  }

  .form-label {
    font-weight: 500;
    color: var(--dark);
    margin-bottom: 8px;
    display: flex;
    align-items: center;
  }

  .form-label i {
    margin-right: 8px;
    font-size: 0.9rem;
    color: var(--primary);
  }

  .form-control, .select2-selection {
    border: 1px solid var(--gray);
    border-radius: 8px;
    padding: 10px 15px;
    transition: all 0.3s;
  }

  .form-control:focus, .select2-selection--single:focus {
    border-color: var(--primary);
    box-shadow: 0 0 0 0.2rem rgba(77, 141, 169, 0.25);
  }

  .product-table {
    border-radius: 8px;
    overflow: hidden;
  }

  .product-table thead th {
    background-color: var(--primary);
    color: white;
    font-weight: 500;
    border: none;
    padding: 12px 15px;
  }

  .product-table tbody td {
    vertical-align: middle;
    padding: 15px;
    border-color: var(--gray);
  }

  .product-table select, .product-table input {
    border-radius: 6px;
  }

  .btn-add {
    background: var(--primary);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 10px 20px;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    transition: all 0.3s;
  }

  .btn-add:hover {
    background: var(--primary-light);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(77, 141, 169, 0.3);
  }

  .btn-add i {
    margin-right: 8px;
  }

  .btn-remove {
    background: var(--danger);
    color: white;
    border: none;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s;
  }

  .btn-remove:hover {
    transform: scale(1.1);
  }

  .btn-submit {
    background: linear-gradient(135deg, var(--success) 0%, var(--success-dark) 100%);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 30px;
    font-weight: 500;
    letter-spacing: 0.5px;
    display: inline-flex;
    align-items: center;
    transition: all 0.3s;
  }

  .btn-submit:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(28, 200, 138, 0.3);
  }

  .btn-submit i {
    margin-right: 10px;
    font-size: 1.1rem;
  }

  .btn-cancel {
    background: var(--danger);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 30px;
    font-weight: 500;
    letter-spacing: 0.5px;
    display: inline-flex;
    align-items: center;
    transition: all 0.3s;
    margin-right: 15px;
  }

  .btn-cancel:hover {
    background: #c82333;
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(220, 53, 69, 0.3);
  }

  .btn-cancel i {
    margin-right: 10px;
    font-size: 1.1rem;
  }

  .notes-box {
    border-left: 4px solid var(--primary);
    background-color: var(--light);
    border-radius: 0 8px 8px 0;
    padding: 15px;
  }

  .order-summary {
    background-color: var(--light);
    border-radius: 8px;
    padding: 20px;
    margin-top: 30px;
    border-left: 4px solid var(--primary);
  }

  .summary-item {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
    padding-bottom: 10px;
    border-bottom: 1px solid var(--gray);
  }

  .summary-total {
    font-weight: 600;
    font-size: 1.1rem;
    color: var(--dark);
  }

  .nav-tabs {
    border-bottom: 2px solid var(--gray);
  }

  .nav-tabs .nav-link {
    color: var(--dark);
    font-weight: 500;
    border: none;
    padding: 12px 20px;
    margin-right: 5px;
    border-radius: 8px 8px 0 0;
  }

  .nav-tabs .nav-link.active {
    color: white;
    background: var(--primary);
    border: none;
  }

  .nav-tabs .nav-link:hover:not(.active) {
    border: none;
    color: var(--primary);
  }

  .tab-content {
    padding: 20px 0;
  }

  .select2-container--bootstrap4 .select2-selection--single {
    height: auto;
    padding: 10px 15px;
  }

  .select2-container--bootstrap4 .select2-selection__arrow {
    height: 100%;
  }

  @media (max-width: 768px) {
    .section-title {
      font-size: 1.2rem;
    }
    
    .product-table thead {
      display: none;
    }
    
    .product-table tbody tr {
      display: block;
      margin-bottom: 20px;
      border: 1px solid var(--gray);
      border-radius: 8px;
    }
    
    .product-table tbody td {
      display: flex;
      justify-content: space-between;
      align-items: center;
      border: none;
      border-bottom: 1px solid var(--gray);
    }
    
    .product-table tbody td:before {
      content: attr(data-label);
      font-weight: 500;
      color: var(--dark);
      margin-right: 15px;
    }
    
    .product-table tbody td:last-child {
      border-bottom: none;
    }
  }
</style>

<%- include('../includes/header.ejs') -%>
<%- include('../components/searchbartr.ejs') -%>
</div>
</div>
</div>
</div>
</div>

<div class="container-fluid mt--6">
  <div class="row">
    <div class="col-lg-10 mx-auto">
      <div class="card order-card">
        <div class="card-header card-header-custom">
          <h3 class="text-white"><i class="fas fa-edit"></i> Update Order #ORD-1001</h3>
        </div>
        <div class="card-body">
          <form >
            <input type="hidden" name="orderId" value="<%=order.id %>">
            
            <!-- Customer Information Section -->
            <div class="mb-3">
              <h5 class="section-title"><i class="fas fa-user-tag"></i> Order Information</h5>
              <div class="row" id="cardb">
                <div class="col-md-6 mb-4" id="cardb">
                  <label for="customerName" class="form-label"><i class="fas fa-user"></i> Customer Name</label>
                  <select class="customer-name-js form-control" id="customerName" name="name" required>
                  
                  </select>
                </div>
                <div class="col-md-6 mb-4">
                  <label for="customerCode" class="form-label"><i class="fas fa-id-card"></i> Customer Code</label>
                  <select class="customer-code-js form-control" id="customerCode" name="customerId" required>
           
                  </select>
                </div>
            
                <div class="col-md-4 mb-4">
                  <label for="truckId" class="form-label"><i class="fas fa-truck"></i> Truck ID</label>
                  <select class="truck-js form-control" id="truckId" name="truckId" required>
                  
                  </select>
                </div>
                <div class="col-md-4 mb-4">
                  <label for="zone" class="form-label"><i class="fas fa-map-marked-alt"></i> Delivery Zone</label>
                  <select class="zone-js form-control" id="zone" name="area">
                  
                  </select>
                </div>
                <div class="col-md-4 mb-4">
                  <label for="status" class="form-label"><i class="fas fa-info-circle"></i> Order Status</label>
                  <!-- <select class="form-control" id="status" name="status">
                    <option value="PENDING" selected>Pending</option>
                    <option value="IN_PROGRESS">In Progress</option>
                    <option value="COMPLETED">Completed</option>
                    <option value="CANCELLED">Cancelled</option>
                  </select> -->
                  <input type="text" id="status" name="status" disabled  class="form-control">
                </div>
              </div>
            </div>
            
            <!-- Tab Navigation -->
            <ul class="nav nav-tabs" id="orderTabs" role="tablist">
              <li class="nav-item">
                <a class="nav-link active" id="products-tab" data-toggle="tab" href="#products" role="tab" aria-controls="products" aria-selected="true">
                  <i class="fas fa-box-open mr-2"></i>Products
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link" id="payments-tab" data-toggle="tab" href="#payments" role="tab" aria-controls="payments" aria-selected="false">
                  <i class="fas fa-credit-card mr-2"></i>Payments
                </a>
              </li>
            </ul>
            
            <!-- Tab Content -->
            <div class="tab-content" id="orderTabsContent">
              <!-- Products Tab -->
              <div class="tab-pane fade show active" id="products" role="tabpanel" aria-labelledby="products-tab">
                <div class="mt-4">
                  <button type="button" class="btn btn-add" id="addProductBtn">
                    <i class="fas fa-plus-circle"></i> Add Product
                  </button>
                  
                  <div class="table-responsive mt-3">
            <!-- Modify the table header in your HTML -->
                        <table class="table product-table" id="productsTable">
                          <thead>
                            <tr>
                              <th>Product Name</th>
                              <th>Quantity</th>
                              <th>Lend/Return</th>
                              <th>Unit Price</th>
                              <th>Coupon Qty</th>
                              <th>Total</th>
                              <th>Action</th>
                            </tr>
                          </thead>
                          <tbody>
                            <!-- Rows will be added dynamically -->
                          </tbody>
                        </table>
                  </div>
                </div>
              </div>
              
              <!-- Payments Tab -->
              <div class="tab-pane fade" id="payments" role="tabpanel" aria-labelledby="payments-tab">
                <div class="mt-4">
                  <div class="row mb-4">
                    <div class="col-md-3">
                      <label class="form-label"><i class="fas fa-dollar-sign"></i> Amount</label>
                      <input type="number" id="paymentAmount" class="form-control" min="0" step="0.01" placeholder="0.00" required>
                    </div>
                    <div class="col-md-3">
                      <label class="form-label"><i class="fas fa-money-bill-wave"></i> Payment Method</label>
                      <select id="paymentMethod" class="form-control" required>
                        <option value="Cash">Cash</option>
                        <option value="Card">Card</option>
                        <!-- <option value="Bank Transfer">Bank Transfer</option> -->
                      </select>
                    </div>
                    <div class="col-md-3 d-flex align-items-end">
                      <button type="button" id="addPaymentBtn" class="btn btn-add">
                        <i class="fas fa-plus-circle"></i> Add Payment
                      </button>
                    </div>
                  </div>
                  
                  <div class="table-responsive mt-3">
                    <table class="table product-table" id="paymentsTable">
                      <thead>
                        <tr>
                          <th>Payment Date</th>
                          <th>Amount</th>
                          <th>Salesman ID</th>
                          <th>Payment Mode</th>
                          <th>Action</th>
                        </tr>
                      </thead>
                      <tbody>
                     
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Order Summary -->
            <div class="order-summary">
              <h5 class="section-title"><i class="fas fa-receipt"></i> Order Summary</h5>
              <div class="summary-item">
                <span>Subtotal:</span>
                <span id="subtotalAmount">0</span>
              </div>
           
              <div class="summary-item">
                <span>Amount Paid:</span>
                <span id="creditPaidAmount">0</span>
              </div>
              <div class="summary-item summary-total">
                <span>Total Balance:</span>
                <span id="totalAmount">0</span>
              </div>
            </div>
            
            <!-- Additional Notes -->
         
            
            <!-- Action Buttons -->
            <div class="text-center mt-5">
              <button type="button" class="btn btn-cancel" id="deleteOrderBtn" data-id="<%=order._id %>">
                <i class="fas fa-trash-alt"></i> DELETE ORDER
              </button>
              <button type="button" id="updateorder" class="btn btn-submit" >
                <i class="fas fa-save"></i> UPDATE ORDER
              </button>

              <button type="button" id="markdelivery" class="btn btn-submit bg-gradient-primary" >
                <i class="fas fa-truck"></i> Mark Delivery
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>
<div class="modal fade" id="couponModal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5>Available Coupons</h5>
        <button type="button" class="close" data-dismiss="modal">&times;</button>
      </div>
      <div class="modal-body">
        <div class="form-row mb-3">
          <div class="col">
            <label for="selectedRechargeId">Coupon ID</label>
            <input type="text" id="selectedRechargeId" class="form-control" placeholder="Auto-filled" >
          </div>
          <div class="col">
            <label for="redeemQuantity">Redeem Quantity</label>
            <input type="number" id="redeemQuantity" class="form-control" min="1" placeholder="Enter qty">
          </div>
          <div class="col d-flex align-items-end">
            <button id="doRedeemBtn" class="btn btn-success" disabled>Redeem</button>
          </div>
        </div>
        <div class="table-responsive">
          <table class="table" id="couponsTable">
            <thead>
              <tr>
                <th>Coupon ID</th>
                <th>Available Qty</th>
                <th>Amount</th>
                <th>Action</th>
              </tr>
            </thead>
            <tbody>
              <!-- appended via appendCouponRow() -->
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>

<%- include('../includes/footer.ejs') -%>
<%- include('../includes/end.ejs') -%>
<!-- JavaScript Libraries -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<!-- 1) jQuery -->
<!-- 2) Popper (only needed if you’re not using bootstrap.bundle) -->
<!-- 3) Bootstrap’s JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.min.js"></script>

<!-- Include Select2 CSS -->

<!-- Include Select2 JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.8/js/select2.min.js" defer></script>

<script>
  let balance = 0
 const serverOrderData = <%- JSON.stringify(order) %>;

 $(document).ready(function() {
  // Initialize products array from server data
  let products = serverOrderData.products ? [...serverOrderData.products] : [];
  
  // Initialize Customer Name Select2 with initial value
  $('.customer-name-js').select2({
    theme: 'bootstrap4',
    placeholder: "Search customer name...",
    allowClear: true,
    dropdownParent: $("#cardb"),
    ajax: {
      url: "/customersee",
      dataType: "json",
      delay: 250,
      data: function(params) {
        return {
          search: params.term || "",
          customerId: $("#customerCode").val() || ""
        };
      },
      processResults: function(data) {
        return {
          results: data.map(function(item) {
            return { id: item.name, text: item.name };
          }),
        };
      },
    },
    // Set initial data
    data: serverOrderData.name ? [{ id: serverOrderData.name, text: serverOrderData.name }] : []
  }).val(serverOrderData.name || null).trigger('change');

  // Initialize Customer Code Select2 with initial value
  $('.customer-code-js').select2({
    theme: 'bootstrap4',
    placeholder: "Search customer code...",
    allowClear: true,
    ajax: {
      url: "/customersee",
      dataType: "json",
      delay: 250,
      data: function(params) {
        return {
          search: params.term || "",
          customerName: $("#customerName").val() || ""
        };
      },
      processResults: function(data) {
        return {
          results: data.map(function(item) {
            return { id: item.id, text: item.id };
          }),
        };
      },
    },
    // Set initial data
    data: serverOrderData.customerId ? [{ id: serverOrderData.customerId, text: serverOrderData.customerId }] : []
  }).val(serverOrderData.customerId || null).trigger('change');

  // Initialize Truck Select2 with initial value
  $('.truck-js').select2({
    theme: 'bootstrap4',
    placeholder: "Search truck...",
    allowClear: true,
    ajax: {
      url: '/truckids',
      dataType: 'json',
      delay: 250,
      data: function(params) {
        return {
          search: params.term,
          customKey: 'utilities'
        };
      },
      processResults: function(data) {
        return {
          results: data.map(function(item) {
            return { id: item.id, text: item.id };
          }),
        };
      },
    },
    // Set initial data
    data: serverOrderData.truckId ? [{ id: serverOrderData.truckId, text: serverOrderData.truckId }] : []
  }).val(serverOrderData.truckId || null).trigger('change');

  // Initialize Zone Select2 with initial value
  $('.zone-js').select2({
    theme: 'bootstrap4',
    placeholder: "Search zone...",
    allowClear: true,
    ajax: {
      url: '/zoneids',
      dataType: 'json',
      delay: 250,
      data: function(params) {
        return {
          q: params.term,
          truckid: $('#truckId').val()
        };
      },
      processResults: function(data) {
        return {
          results: data.map(function(item) {
            return { id: item.id, text: item.id };
          }),
        };
      },
    },
    // Set initial data
    data: serverOrderData.area ? [{ id: serverOrderData.area, text: serverOrderData.area }] : []
  }).val(serverOrderData.area || null).trigger('change');

  // Regular select for status (not Select2)
  $('#status').val(serverOrderData.status || 'PENDING');

  // Function to initialize product Select2 with proper tracking
  function initializeProductSelect2(element, selectedProduct = null) {
    const select2 = $(element).select2({
      theme: 'bootstrap4',
      placeholder: "Search product...",
      allowClear: true,
      ajax: {
        url: "/getproductsnames",
        dataType: "json",
        delay: 250,
        data: function(params) {
          return { q: params.term || "" };
        },
        processResults: function(data) {
          if (data.results) {
            return data;
          } else {
            return {
              results: data.map(function(item) {
                return {
                  id: item._id || item.id,
                  text: item.name || item.text,
                  price: item.price || 0
                };
              }),
            };
          }
        },
        cache: true
      }
    });

    // If there's a selected product, set it
    if (selectedProduct) {
      const option = new Option(selectedProduct.name || selectedProduct.productname, selectedProduct._id, true, true);
      $(element).append(option).trigger('change');
      
      // Set the price if available
      if (selectedProduct.price) {
        $(element).closest('tr').find('.price-input').val(selectedProduct.price).trigger('change');
      }
    }

    // When a product is selected, populate the price field and update products array
    select2.on('select2:select', function(e) {
      const data = e.params.data;
      const row = $(this).closest('tr');
      const rowIndex = row.index();
      
      if (data.price) {
        row.find('.price-input').val(data.price).trigger('change');
      }
      
      // Update products array with this change
      updateProductAtIndex(rowIndex);
    });

    return select2;
  }

  // Function to update a specific product in the array by its row index
  function updateProductAtIndex(rowIndex) {
    const row = $(`#productsTable tbody tr:eq(${rowIndex})`);
  const productId = row.find('.product-select').val();
  const productName = row.find('.product-select option:selected').text();
  const quantity = parseFloat(row.find('.quantity-input').val()) || 0;
  const price = parseFloat(row.find('.price-input').val()) || 0;
  const couponQty = parseFloat(row.find('.coupon-qty-input').val()) || 0;
  const rechargeId = row.find('.recharge-id-input').val();
  const lendType = row.find('select[name$="[lrndtype]"]').val();
  const productDbId = row.find('.product-id-input').val(); // Get the _id

    // Check if this product already exists in our products array
    const existingProductIndex = products.findIndex(p => 
      (p.productid === productId) || 
      (rowIndex < products.length && products[rowIndex] === p)
    );
    
    const updatedProduct = {
      _id: productDbId, // Include the existing _id
    productid: productId || null,
    productname: productName,
    quantity: quantity,
    price: price,
    lendtype: lendType,
    couponQty: couponQty,
    rechargeId: rechargeId,
    total: (quantity * price - couponQty * price).toFixed(2)
  };
    
    if (existingProductIndex >= 0) {
      // Update existing product
      products[existingProductIndex] = {
        ...products[existingProductIndex],
        ...updatedProduct
      };
    } else if (rowIndex < products.length) {
      // Replace product at this index
      products[rowIndex] = updatedProduct;
    } else {
      // Add new product
      products.push(updatedProduct);
    }
    
    console.log("Updated products array:", products);
    return products;
  }

  // Function to update all products in the array
  function updateAllProducts() {
    // Clear the array but keep the reference
    products.length = 0;
  
  $('#productsTable tbody tr').each(function(index) {
    const row = $(this);
    const productId = row.find('.product-select').val();
    const productName = row.find('.product-select option:selected').text();
    const quantity = parseFloat(row.find('.quantity-input').val()) || 0;
    const price = parseFloat(row.find('.price-input').val()) || 0;
    const couponQty = parseFloat(row.find('.coupon-qty-input').val()) || 0;
    const rechargeId = row.find('.recharge-id-input').val();
    const lendType = row.find('select[name$="[lrndtype]"]').val();
    const productDbId = row.find('.product-id-input').val(); // Get the _id

    products.push({
      _id: productDbId, // Include the existing _id
      productid: productId || null,
      productname: productName,
      quantity: quantity,
      price: price,
      lendtype: lendType,
      couponQty: couponQty,
      rechargeId: rechargeId,
      total: (quantity * price - couponQty * price).toFixed(2)
    });
  });
  
  console.log("Full products array update:", products);
  return products;
  }

  // Populate form with order data
  function populateFormWithOrderData() {
    if (!serverOrderData) return;
    
    // Basic order info
    $('#customerName').val(serverOrderData.name).trigger('change');
    $('#customerCode').val(serverOrderData.customerId).trigger('change');
    $('#truckId').val(serverOrderData.truckId).trigger('change');
    $('#zone').val(serverOrderData.area).trigger('change');
    $('#status').val(serverOrderData.status);
    
    // Products table
    const productsTable = $('#productsTable tbody');
    productsTable.empty();
    
    if (serverOrderData.products && serverOrderData.products.length > 0) {
      serverOrderData.products.forEach((product, index) => {
        // Modify the product row template in your populateFormWithOrderData function
          const productRow = `
            <tr>
              <td data-label="Product Name">

                <select class="form-control product-select" name="products[${index}][name]" required>
                  ${product.productname ? `<option value="${product.productid}" selected>${product.productname}</option>` : ''}
                </select>
              </td>
              <td data-label="Quantity">
                  <input type="hidden" class="product-id-input" name="products[${index}][_id]" value="${product._id || ''}">
                <input type="number" class="form-control quantity-input" name="products[${index}][quantity]" 
                      value="${product.quantity || 1}" min="1" required>
              </td>
              <td data-label="Lend/Return">
                <select class="form-control" name="products[${index}][lrndtype]">
                  <option value="SOLD" ${product.lendtype === 'SOLD' ? 'selected' : ''}>Sold</option>
                  <option value="CUSTODY" ${product.lendtype === 'CUSTODY' ? 'selected' : ''}>Custody</option>
                  <option value="DEPOSIT" ${product.lendtype === 'DEPOSIT' ? 'selected' : ''}>Deposit</option>
                </select>
              </td>
              <td data-label="Unit Price">
                <input type="number" class="form-control price-input" name="products[${index}][price]" 
                      value="${product.price || 0}" min="0" step="0.01" required>
              </td>
              <td data-label="Coupon Qty">
                <div class="input-group">
                  <input type="number" class="form-control coupon-qty-input" 
                        name="products[${index}][couponQty]" value="${product.couponQty || 0}" min="0" readonly>
                  <div class="input-group-append">
                    <button class="btn btn-outline-primary select-coupon-btn" type="button" 
                            data-product-index="${index}">
                      <i class="fas fa-ticket-alt"></i>
                    </button>
                  </div>
                </div>
                
                <input type="hidden" class="recharge-id-input" name="products[${index}][rechargeId]" 
                      value="${product.rechargeId || ''}">
              </td>
          <td data-label="Total" class="total-cell">
  ${'$' + (
      ((product.quantity || 0) * (product.price || 0))
      - ((product.couponQty  || 0) * (product.price || 0))
    ).toFixed(2)
  }
</td>

              <td data-label="Action">
                <button type="button" class="btn-remove remove-product">
                  <i class="fas fa-times"></i>
                </button>
              </td>
            </tr>
          `;
          productsTable.append(productRow);
        
        // Initialize Select2 with the current product
        const selectElement = productsTable.find('tr:last .product-select');
        initializeProductSelect2(selectElement, {
          _id: product._id || product.productid,
          name: product.productname,
          price: product.price
        });
      });
    } else {
      // Add empty row if no products
      addEmptyProductRow();
    }
  }
  
  function populateFormWithPaymentData() {
    if (!serverOrderData) return;
    
    // Payments table
    const paymentTable = $('#paymentsTable tbody');
    paymentTable.empty();
    
    if (serverOrderData.payments && serverOrderData.payments.length > 0) {
      serverOrderData.payments.forEach((payment, index) => {
        const formattedDate = new Date(payment.createdAt).toLocaleString();

        const paymentrow = `
          <tr>
            <td data-label="Payment Date">
              ${formattedDate}
            </td>
            <td data-label="Amount">
              ${payment.creditAmountPaid}
            </td>
            <td data-label="Salesman ID">
              ${payment.salesmanid}
            </td>
            <td data-label="Payment Mode">
              ${payment.modeOfPayment}
            </td>
            <td data-label="Action">
              <button type="button" class="btn-remove remove-payment" data-id="${payment._id}">
                <i class="fas fa-times"></i>
              </button>
            </td>
          </tr>
        `;
        paymentTable.append(paymentrow);
      });
    } 
  }

  // Function to add an empty product row
  function addEmptyProductRow() {
    const productCount = $('#productsTable tbody tr').length;
    const newRow = `
      <tr>
        <td data-label="Product Name">
          <select class="form-control product-select" name="products[${productCount}][name]" required>
            <option value=""></option>
          </select>
        </td>
        <td data-label="Quantity">
          <input type="number" class="form-control quantity-input" name="products[${productCount}][quantity]" value="1" min="1" required>
        </td>
        <td data-label="Lend/Return">
          <select class="form-control" name="products[${productCount}][lrndtype]">
            <option value="SOLD">Sold</option>

            <option value="CUSTODY">Custody</option>
                          <option value="DEPOSIT">Desposit</option>
          </select>
        </td>
        <td data-label="Unit Price">
          <input type="number" class="form-control price-input" name="products[${productCount}][price]" value="0.00" min="0" step="0.01" required>
        </td>
         <td data-label="Coupon Qty">
                <div class="input-group">
                  <input type="number" class="form-control coupon-qty-input" 
                        name="products[${productCount}][couponQty]" value="0" min="0" readonly>
                  <div class="input-group-append">
                    <button class="btn btn-outline-primary select-coupon-btn" type="button" 
                            data-product-index="${productCount}">
                      <i class="fas fa-ticket-alt"></i>
                    </button>
                  </div>
                </div>

                <input type="hidden" class="recharge-id-input" name="products[${productCount}][rechargeId]" 
                      value="">
              </td>
        <td data-label="Total" class="total-cell">
          0.00
        </td>
        <td data-label="Action">
          <button type="button" class="btn-remove remove-product">
            <i class="fas fa-times"></i>
          </button>
        </td>
      </tr>
    `;
    $('#productsTable tbody').append(newRow);
    
    // Initialize Select2 for the new product row
    initializeProductSelect2($('#productsTable tbody tr:last .product-select'));
    
    // Add this new product (empty) to our products array
    updateAllProducts();
  }

  // Initialize the page
  populateFormWithOrderData();
  populateFormWithPaymentData();
  
  // Handle quantity or price change events
  $(document).on('change', '.quantity-input, .price-input', function() {
    const row = $(this).closest('tr');
    const quantity = parseFloat(row.find('.quantity-input').val()) || 0;
    const price = parseFloat(row.find('.price-input').val()) || 0;
    const total = (quantity * price).toFixed(2);
    row.find('.total-cell').text(total);
    
    // Update product in our array
    const rowIndex = row.index();
    updateProductAtIndex(rowIndex);
    
    // Update order summary
    updateOrderSummary();
  });
  
  // Handle lend/return type change
  $(document).on('change', 'select[name$="[lrndtype]"]', function() {
    const row = $(this).closest('tr');
    const rowIndex = row.index();
    updateProductAtIndex(rowIndex);
  });
  
  // Add Product Button click handler
  $('#addProductBtn').click(function() {
    addEmptyProductRow();
    updateOrderSummary();
  });
  
  // Remove Product Button click handler
  $(document).on('click', '.remove-product', function() {
    const row = $(this).closest('tr');
    const rowIndex = row.index();
    
    // Remove this product from our array (by index or by finding it)
    products.splice(rowIndex, 1);
    console.log("Product removed, updated array:", products);
    
    // Remove the row from the DOM
    row.remove();
    
    // Update order summary
    updateOrderSummary();
  });
  
  // Add Payment Button click handler
  $('#addPaymentBtn').click(function() {
    if(balance<0){
      return alert('Payment balance is negative')
    }
    const amount = parseFloat($('#paymentAmount').val());
    const method = $('#paymentMethod').val();
    
    if (!amount || amount <= 0) {
      alert('Please enter a valid payment amount');
      return;
    }

    const paymentData = {
      amountpaid: amount,
      modeOfPayment: method,
      orderId: $('input[name="orderId"]').val() || null,
      paymentDate: new Date(),
      salesmanid: 'Admin'
    };

    // Show loading state
    $(this).html('<i class="fas fa-spinner fa-spin"></i> Processing...').prop('disabled', true);
    
    $.ajax({
      url: '/add-payment',
      method: 'POST',
      contentType: 'application/json',
      data: JSON.stringify(paymentData),
      success: function(response) {
        if (response.success && response.payment) {
          // Reload the page after successful payment
          location.reload();
        } else {
          alert(response.message || 'Error processing payment');
        }
      },
      error: function(e) {
        console.log(e.responseJSON.message);
        alert(e.responseJSON.message || 'Error occurred');
      },
      complete: function() {
        $('#addPaymentBtn').html('<i class="fas fa-plus-circle"></i> Add Payment').prop('disabled', false);
      }
    });
  });

  // Remove Payment Button click handler
  $(document).on('click', '.remove-payment', function() {
    const $btn = $(this);
  const paymentId = $btn.data('id'); // or .data('id') if that's your attr

  if (!paymentId) {
    return alert('No payment ID found!');
  }

  if (!confirm('Are you sure you want to delete this payment?')) {
    return;
  }

  // Disable the button to prevent double-click
  $btn.prop('disabled', true);

  $.ajax({
    url: `/payments/${paymentId}`,
    method: 'DELETE',
    success: function(response) {
      if (response.success) {
        // Remove the row and update summary
        location.reload();

      } else {
        alert(response.message || 'Failed to delete payment');
        $btn.prop('disabled', false);
      }
    },
    error: function(xhr) {
      alert('Error deleting payment. Please try again.');
      $btn.prop('disabled', false);
    }
  });
  });
  
  // Delete Order Button click handler
  $('#deleteOrderBtn').click(function() {
    const orderId = $(this).data('id');
    
    if(confirm('Are you sure you want to delete this order? This action cannot be undone.')) {
      $.ajax({
        url: `/delete-order/`,
        method: 'POST',
        data: {id: orderId},
        success: function(response) {
          if(response.success) {
            window.location.href = '/orders?success=Order deleted successfully';
          } else {
            alert('Error deleting order: ' + (response.message || 'Unknown error'));
          }
        },
        error: function(xhr) {
          alert('Error deleting order. Please try again.');
        }
      });
    }
  });
  
  // Update Order Summary
  function updateOrderSummary() {
  let subtotal = 0;
  let couponDiscount = 0;
  
  // Calculate products subtotal based on our products array
  products.forEach(product => {
    const productTotal = (parseFloat(product.quantity) || 0) * (parseFloat(product.price) || 0);
    const productCouponDiscount = (parseFloat(product.couponQty) || 0) * (parseFloat(product.price) || 0);
    
    subtotal += productTotal;
    couponDiscount += productCouponDiscount;
  });
  
  const total = subtotal - couponDiscount;
  
  // Calculate payments total
  let paymentsTotal = 0;
  if (Array.isArray(serverOrderData.payments) && serverOrderData.payments.length > 0) {
    serverOrderData.payments.forEach(payment => {
      paymentsTotal += parseFloat(payment.creditAmountPaid) || 0;
    });
  }
  
   balance = total - paymentsTotal;
  
  // Update summary display
  $('#subtotalAmount').text(subtotal.toFixed(2));
  $('#couponDiscountAmount').text(couponDiscount.toFixed(2));
  $('#creditPaidAmount').text(paymentsTotal.toFixed(2));
  $('#totalAmount').text(balance.toFixed(2));
}
  // Initialize order summary
  updateOrderSummary();
  
  // Update Order Button click handler
  $('#updateorder').click(function() {
    if(balance<0){
      return alert('Payment balance is negative')
    }
    productupdate('PENDING')
    // Make sure we have the latest product data
  });
  $('#markdelivery').click(function() {
    if(balance<0){
      return alert('Payment balance is negative')
    }
    productupdate('DELIVERED')
    // Make sure we have the latest product data
  });
  function productupdate(stat) {
  updateAllProducts();

  const orderId = serverOrderData.id;
  const formData = {
    orderId: orderId,
    name: $('#customerName').val(),
    customerId: $('#customerCode').val(),
    area: $('#zone').val(),
    truckId: $('#truckId').val(),
    notes: $('#notes').val(),
    status: stat,
    products: products  // Use our tracked products array
  };

  if (confirm('Are you sure you want to update this order?')) {
    $.ajax({
      url: '/updateorder',
      method: 'POST',
      contentType: 'application/json',
      data: JSON.stringify(formData),
      success: function(response) {
        if (response.success) {
       
            alert(response.message);
          window.location.href = `/editorder/${response.order.id}?success=${encodeURIComponent(response.message)}`;
        } else {
          alert('Error updating order: ' + (response.message || 'Unknown error'));
          console.error('Server response:', response);
        }
      },
      error: function(xhr) {
        const errorMessage = xhr.responseJSON?.message || xhr.responseText || 'Unknown error';
        alert('Error updating order: ' + errorMessage);
        console.error('AJAX error:', xhr);
      }
    });
  }
}

$(document).on('click', '.select-coupon-btn', function() {
  const productIndex = $(this).data('product-index');
  const customerId = $('#customerCode').val();
  const truckid = $('#truckId').val();

  const productRow = $(this).closest('tr');
  const currentQuantity = parseInt(productRow.find('.quantity-input').val()) || 0;
  console.log()
  const currentcouponQuantity = parseInt(productRow.find('.coupon-qty-input').val()) || 0;

  if (!customerId||!truckid) {
    alert('Please select a customer and truck');
    return;
  }
  
  // Store the current product index in the modal for later use
  $('#couponModal').data('product-index', productIndex);
  $('#couponModal').data('current-quantity', currentQuantity);
  $('#couponModal').data('current-couponquantity', currentcouponQuantity);
  // if(currentcouponQuantity>0){
  //   alert('Please add as new Demand already claimed coupon for this demand if you try to add ,it you may lose previous coupon in waste  ')
  //   return
  // }
  // Load available coupons for this customer
  loadCustomerCoupons(customerId,truckid);
  
  // Show the modal
  $('#couponModal').modal('show');
});

// Function to load customer coupons
function loadCustomerCoupons(customerId, truckId, product) {
  $.ajax({
    url: `/customer-coupons/${customerId}/${truckId}/${product}`,
    method: 'GET',
    success: function(response) {
      if (response.success && Array.isArray(response.data)) {
        const couponsTable = $('#couponsTable tbody');
        couponsTable.empty();

        response.data.forEach(summary => {
          const { rechargeId, activeCount, totalAmt } = summary;

          const row = `
            <tr data-coupon-id="${rechargeId}"
        data-available-qty="${activeCount}">
              <td>${rechargeId}</td>
              <td>${activeCount}</td>
              <td>$${totalAmt.toFixed(2)}</td>
              <td>
                <button 
                  class="btn btn-sm btn-primary apply-coupons-btn"
                  data-recharge-id="${rechargeId}"
                  data-active-count="${activeCount}"
                  data-total-amt="${totalAmt}"
                >
                  Select
                </button>
              </td>
            </tr>
          `;
          couponsTable.append(row);
        });

      } else {
        alert(response.message || 'No coupon summaries available for this customer/route/product.');
      }
    },
    error: function(xhr) {
      console.error(xhr);
      alert('Error loading coupons. Please try again.');
    }
  });
}
$('#couponsTable').on('click', '.apply-coupons-btn', function() {
  const $row = $(this).closest('tr');
  const rechargeId = $row.data('coupon-id');
  const availQty = Number($row.data('available-qty'));
  const currentQuantity = $('#couponModal').data('current-quantity');
  const currentcouponQuantity = $('#couponModal').data('current-couponquantity');
  console.log(currentQuantity,currentcouponQuantity)

  const defaultQty = Math.min(availQty, (currentQuantity-currentcouponQuantity));

  // Fill the inputs
  $('#selectedRechargeId').val(rechargeId);
  $('#redeemQuantity')
    .val(defaultQty)           // default to full available
    .attr('max', defaultQty)  // prevent over-redeem
    .attr('min', 1); 
  // Enable the final Redeem button
  $('#doRedeemBtn').prop('disabled', false);
});
$(document).on('click', '#doRedeemBtn', function() {
  const rechargeId = $('#selectedRechargeId').val();
  const productIndex = $('#couponModal').data('product-index');
  const currentQuantity = $('#couponModal').data('current-quantity');
  const currentcouponQuantity = $('#couponModal').data('current-couponquantity');
  const maxCouponQty = Number($('#redeemQuantity').val()) + currentcouponQuantity;

  
  const productRow = $(`#productsTable tbody tr:eq(${productIndex})`);
  if (maxCouponQty > currentQuantity) {
    alert('cant add coupons more than required')
   
    return; // abort, do NOT close modal or update table
  }
  // Set the coupon values
  productRow.find('.coupon-qty-input').val(maxCouponQty);
  productRow.find('.recharge-id-input').val(rechargeId);
  
  // Update the total
  updateProductTotal(productRow);
  
  // Close the modal
  $('#couponModal').modal('hide');
});

// Function to apply selected coupon

// Function to update product total considering coupons
function updateProductTotal(row) {
  const quantity = parseFloat(row.find('.quantity-input').val()) || 0;
  const price = parseFloat(row.find('.price-input').val()) || 0;
  const couponQty = parseFloat(row.find('.coupon-qty-input').val()) || 0;
  
  const total = (quantity * price) - (couponQty * price);
  row.find('.total-cell').text(total.toFixed(2));
  
  // Update the products array
  const rowIndex = row.index();
  updateProductAtIndex(rowIndex);
  
  // Update order summary
  updateOrderSummary();
}

// Update the change event handlers to include coupon quantity
$(document).on('change', '.quantity-input, .price-input, .coupon-qty-input', function() {
  const row = $(this).closest('tr');
  updateProductTotal(row);
});


});
</script>

