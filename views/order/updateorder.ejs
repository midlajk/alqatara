<%- include('../includes/head.ejs') -%>
<%- include('../includes/navigation.ejs') -%>

<!-- Add CSS Libraries -->
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/@ttskch/select2-bootstrap4-theme@1.3.4/dist/select2-bootstrap4.min.css" rel="stylesheet">

<style>
  :root {
    --primary: #4d8da9;
    --primary-light: #61A3C0;
    --success: #1cc88a;
    --success-dark: #17a673;
    --danger: #e74a3b;
    --light: #f8f9fc;
    --dark: #5a5c69;
    --gray: #e9ecef;
  }

  .order-card {
    border: none;
    border-radius: 12px;
    box-shadow: 0 6px 18px rgba(0, 0, 0, 0.08);
    overflow: hidden;
  }

  .card-header-custom {
    background: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%);
    color: white;
    padding: 1.5rem;
    border-bottom: none;
  }

  .card-header-custom h3 {
    font-weight: 600;
    margin: 0;
    display: flex;
    align-items: center;
  }

  .card-header-custom i {
    margin-right: 12px;
    font-size: 1.5rem;
  }

  .section-title {
    font-weight: 600;
    color: var(--dark);
    position: relative;
    padding-bottom: 12px;
    margin-bottom: 25px;
    display: flex;
    align-items: center;
  }

  .section-title:after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 50px;
    height: 3px;
    background: linear-gradient(90deg, var(--primary), var(--primary-light));
    border-radius: 3px;
  }

  .section-title i {
    margin-right: 10px;
    color: var(--primary);
  }

  .form-label {
    font-weight: 500;
    color: var(--dark);
    margin-bottom: 8px;
    display: flex;
    align-items: center;
  }

  .form-label i {
    margin-right: 8px;
    font-size: 0.9rem;
    color: var(--primary);
  }

  .form-control, .select2-selection {
    border: 1px solid var(--gray);
    border-radius: 8px;
    padding: 10px 15px;
    transition: all 0.3s;
  }

  .form-control:focus, .select2-selection--single:focus {
    border-color: var(--primary);
    box-shadow: 0 0 0 0.2rem rgba(77, 141, 169, 0.25);
  }

  .product-table {
    border-radius: 8px;
    overflow: hidden;
  }

  .product-table thead th {
    background-color: var(--primary);
    color: white;
    font-weight: 500;
    border: none;
    padding: 12px 15px;
  }

  .product-table tbody td {
    vertical-align: middle;
    padding: 15px;
    border-color: var(--gray);
  }

  .product-table select, .product-table input {
    border-radius: 6px;
  }

  .btn-add {
    background: var(--primary);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 10px 20px;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    transition: all 0.3s;
  }

  .btn-add:hover {
    background: var(--primary-light);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(77, 141, 169, 0.3);
  }

  .btn-add i {
    margin-right: 8px;
  }

  .btn-remove {
    background: var(--danger);
    color: white;
    border: none;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s;
  }

  .btn-remove:hover {
    transform: scale(1.1);
  }

  .btn-submit {
    background: linear-gradient(135deg, var(--success) 0%, var(--success-dark) 100%);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 30px;
    font-weight: 500;
    letter-spacing: 0.5px;
    display: inline-flex;
    align-items: center;
    transition: all 0.3s;
  }

  .btn-submit:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(28, 200, 138, 0.3);
  }

  .btn-submit i {
    margin-right: 10px;
    font-size: 1.1rem;
  }

  .btn-cancel {
    background: var(--danger);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 30px;
    font-weight: 500;
    letter-spacing: 0.5px;
    display: inline-flex;
    align-items: center;
    transition: all 0.3s;
    margin-right: 15px;
  }

  .btn-cancel:hover {
    background: #c82333;
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(220, 53, 69, 0.3);
  }

  .btn-cancel i {
    margin-right: 10px;
    font-size: 1.1rem;
  }

  .notes-box {
    border-left: 4px solid var(--primary);
    background-color: var(--light);
    border-radius: 0 8px 8px 0;
    padding: 15px;
  }

  .order-summary {
    background-color: var(--light);
    border-radius: 8px;
    padding: 20px;
    margin-top: 30px;
    border-left: 4px solid var(--primary);
  }

  .summary-item {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
    padding-bottom: 10px;
    border-bottom: 1px solid var(--gray);
  }

  .summary-total {
    font-weight: 600;
    font-size: 1.1rem;
    color: var(--dark);
  }

  .nav-tabs {
    border-bottom: 2px solid var(--gray);
  }

  .nav-tabs .nav-link {
    color: var(--dark);
    font-weight: 500;
    border: none;
    padding: 12px 20px;
    margin-right: 5px;
    border-radius: 8px 8px 0 0;
  }

  .nav-tabs .nav-link.active {
    color: white;
    background: var(--primary);
    border: none;
  }

  .nav-tabs .nav-link:hover:not(.active) {
    border: none;
    color: var(--primary);
  }

  .tab-content {
    padding: 20px 0;
  }

  .select2-container--bootstrap4 .select2-selection--single {
    height: auto;
    padding: 10px 15px;
  }

  .select2-container--bootstrap4 .select2-selection__arrow {
    height: 100%;
  }

  @media (max-width: 768px) {
    .section-title {
      font-size: 1.2rem;
    }
    
    .product-table thead {
      display: none;
    }
    
    .product-table tbody tr {
      display: block;
      margin-bottom: 20px;
      border: 1px solid var(--gray);
      border-radius: 8px;
    }
    
    .product-table tbody td {
      display: flex;
      justify-content: space-between;
      align-items: center;
      border: none;
      border-bottom: 1px solid var(--gray);
    }
    
    .product-table tbody td:before {
      content: attr(data-label);
      font-weight: 500;
      color: var(--dark);
      margin-right: 15px;
    }
    
    .product-table tbody td:last-child {
      border-bottom: none;
    }
  }
</style>

<%- include('../includes/header.ejs') -%>
<%- include('../components/searchbartr.ejs') -%>
</div>
</div>
</div>
</div>
</div>

<div class="container-fluid mt--6">
  <div class="row">
    <div class="col-lg-10 mx-auto">
      <div class="card order-card">
        <div class="card-header card-header-custom">
          <h3 class="text-white"><i class="fas fa-edit"></i> Update Order #ORD-1001</h3>
        </div>
        <div class="card-body">
          <form action="/orders/update/ORD-1001" method="POST" id="orderForm">
            <input type="hidden" name="orderId" value="<%=order.id %>">
            
            <!-- Customer Information Section -->
            <div class="mb-3">
              <h5 class="section-title"><i class="fas fa-user-tag"></i> Order Information</h5>
              <div class="row" id="cardb">
                <div class="col-md-6 mb-4" id="cardb">
                  <label for="customerName" class="form-label"><i class="fas fa-user"></i> Customer Name</label>
                  <select class="customer-name-js form-control" id="customerName" name="name" required>
                  
                  </select>
                </div>
                <div class="col-md-6 mb-4">
                  <label for="customerCode" class="form-label"><i class="fas fa-id-card"></i> Customer Code</label>
                  <select class="customer-code-js form-control" id="customerCode" name="customerId" required>
           
                  </select>
                </div>
            
                <div class="col-md-4 mb-4">
                  <label for="truckId" class="form-label"><i class="fas fa-truck"></i> Truck ID</label>
                  <select class="truck-js form-control" id="truckId" name="truckId" required>
                  
                  </select>
                </div>
                <div class="col-md-4 mb-4">
                  <label for="zone" class="form-label"><i class="fas fa-map-marked-alt"></i> Delivery Zone</label>
                  <select class="zone-js form-control" id="zone" name="area">
                  
                  </select>
                </div>
                <div class="col-md-4 mb-4">
                  <label for="status" class="form-label"><i class="fas fa-info-circle"></i> Order Status</label>
                  <select class="form-control" id="status" name="status">
                    <option value="PENDING" selected>Pending</option>
                    <option value="IN_PROGRESS">In Progress</option>
                    <option value="COMPLETED">Completed</option>
                    <option value="CANCELLED">Cancelled</option>
                  </select>
                </div>
              </div>
            </div>
            
            <!-- Tab Navigation -->
            <ul class="nav nav-tabs" id="orderTabs" role="tablist">
              <li class="nav-item">
                <a class="nav-link active" id="products-tab" data-toggle="tab" href="#products" role="tab" aria-controls="products" aria-selected="true">
                  <i class="fas fa-box-open mr-2"></i>Products
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link" id="payments-tab" data-toggle="tab" href="#payments" role="tab" aria-controls="payments" aria-selected="false">
                  <i class="fas fa-credit-card mr-2"></i>Payments
                </a>
              </li>
            </ul>
            
            <!-- Tab Content -->
            <div class="tab-content" id="orderTabsContent">
              <!-- Products Tab -->
              <div class="tab-pane fade show active" id="products" role="tabpanel" aria-labelledby="products-tab">
                <div class="mt-4">
                  <button type="button" class="btn btn-add" id="addProductBtn">
                    <i class="fas fa-plus-circle"></i> Add Product
                  </button>
                  
                  <div class="table-responsive mt-3">
                    <table class="table product-table" id="productsTable">
                      <thead>
                        <tr>
                          <th>Product Name</th>
                          <th>Quantity</th>
                          <th>Lend/Return</th>
                          <th>Unit Price</th>
                          <th>Total</th>
                          <th>Action</th>
                        </tr>
                      </thead>
                      <tbody>
                   
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
              
              <!-- Payments Tab -->
              <div class="tab-pane fade" id="payments" role="tabpanel" aria-labelledby="payments-tab">
                <div class="mt-4">
                  <div class="row mb-4">
                    <div class="col-md-3">
                      <label class="form-label"><i class="fas fa-dollar-sign"></i> Amount</label>
                      <input type="number" id="paymentAmount" class="form-control" min="0" step="0.01" placeholder="0.00" required>
                    </div>
                    <div class="col-md-3">
                      <label class="form-label"><i class="fas fa-money-bill-wave"></i> Payment Method</label>
                      <select id="paymentMethod" class="form-control" required>
                        <option value="Cash">Cash</option>
                        <option value="Credit Card">Credit Card</option>
                        <option value="Bank Transfer">Bank Transfer</option>
                      </select>
                    </div>
                    <div class="col-md-3 d-flex align-items-end">
                      <button type="button" id="addPaymentBtn" class="btn btn-add">
                        <i class="fas fa-plus-circle"></i> Add Payment
                      </button>
                    </div>
                  </div>
                  
                  <div class="table-responsive mt-3">
                    <table class="table product-table" id="paymentsTable">
                      <thead>
                        <tr>
                          <th>Payment Date</th>
                          <th>Amount</th>
                          <th>Salesman ID</th>
                          <th>Payment Mode</th>
                          <th>Action</th>
                        </tr>
                      </thead>
                      <tbody>
                     
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Order Summary -->
            <div class="order-summary">
              <h5 class="section-title"><i class="fas fa-receipt"></i> Order Summary</h5>
              <div class="summary-item">
                <span>Subtotal:</span>
                <span id="subtotalAmount">75.00</span>
              </div>
           
              <div class="summary-item">
                <span>Amount Paid:</span>
                <span id="creditPaidAmount">75.00</span>
              </div>
              <div class="summary-item summary-total">
                <span>Total Balance:</span>
                <span id="totalAmount">85.00</span>
              </div>
            </div>
            
            <!-- Additional Notes -->
         
            
            <!-- Action Buttons -->
            <div class="text-center mt-5">
              <button type="button" class="btn btn-cancel" id="deleteOrderBtn" data-id="<%=order._id %>">
                <i class="fas fa-trash-alt"></i> DELETE ORDER
              </button>
              <button type="submit" class="btn btn-submit">
                <i class="fas fa-save"></i> UPDATE ORDER
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<%- include('../includes/footer.ejs') -%>
<%- include('../includes/end.ejs') -%>
<!-- JavaScript Libraries -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

<!-- Include Select2 CSS -->

<!-- Include Select2 JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.8/js/select2.min.js" defer></script>

<script>
 const serverOrderData = <%- JSON.stringify(order) %>;

$(document).ready(function() {
  // Initialize Customer Name Select2 with initial value
  $('.customer-name-js').select2({
    theme: 'bootstrap4',
    placeholder: "Search customer name...",
    allowClear: true,
    dropdownParent: $("#cardb"),
    ajax: {
      url: "/customersee",
      dataType: "json",
      delay: 250,
      data: function(params) {
        return {
          search: params.term || "",
          customerId: $("#customerCode").val() || ""
        };
      },
      processResults: function(data) {
        return {
          results: data.map(function(item) {
            return { id: item.name, text: item.name };
          }),
        };
      },
    },
    // Set initial data
    data: serverOrderData.name ? [{ id: serverOrderData.name, text: serverOrderData.name }] : []
  }).val(serverOrderData.name || null).trigger('change');

  // Initialize Customer Code Select2 with initial value
  $('.customer-code-js').select2({
    theme: 'bootstrap4',
    placeholder: "Search customer code...",
    allowClear: true,
    ajax: {
      url: "/customersee",
      dataType: "json",
      delay: 250,
      data: function(params) {
        return {
          search: params.term || "",
          customerName: $("#customerName").val() || ""
        };
      },
      processResults: function(data) {
        return {
          results: data.map(function(item) {
            return { id: item.id, text: item.id };
          }),
        };
      },
    },
    // Set initial data
    data: serverOrderData.customerId ? [{ id: serverOrderData.customerId, text: serverOrderData.customerId }] : []
  }).val(serverOrderData.customerId || null).trigger('change');

  // Initialize Truck Select2 with initial value
  $('.truck-js').select2({
    theme: 'bootstrap4',
    placeholder: "Search truck...",
    allowClear: true,
    ajax: {
      url: '/truckids',
      dataType: 'json',
      delay: 250,
      data: function(params) {
        return {
          search: params.term,
          customKey: 'utilities'
        };
      },
      processResults: function(data) {
        return {
          results: data.map(function(item) {
            return { id: item.id, text: item.id };
          }),
        };
      },
    },
    // Set initial data
    data: serverOrderData.truckId ? [{ id: serverOrderData.truckId, text: serverOrderData.truckId }] : []
  }).val(serverOrderData.truckId || null).trigger('change');

  // Initialize Zone Select2 with initial value
  $('.zone-js').select2({
    theme: 'bootstrap4',
    placeholder: "Search zone...",
    allowClear: true,
    ajax: {
      url: '/zoneids',
      dataType: 'json',
      delay: 250,
      data: function(params) {
        return {
          q: params.term,
          truckid: $('#truckId').val()
        };
      },
      processResults: function(data) {
        return {
          results: data.map(function(item) {
            return { id: item.id, text: item.id };
          }),
        };
      },
    },
    // Set initial data
    data: serverOrderData.area ? [{ id: serverOrderData.area, text: serverOrderData.area }] : []
  }).val(serverOrderData.area || null).trigger('change');

  // Regular select for status (not Select2)
  $('#status').val(serverOrderData.status || 'PENDING');
});</script>
<script>
$(document).ready(function() {
  function initializeProductSelect2(element, selectedProduct = null) {
  const select2 = $(element).select2({
    theme: 'bootstrap4',
    placeholder: "Search product...",
    allowClear: true,
    ajax: {
      url: "/getproductsnames",
      dataType: "json",
      delay: 250,
      data: function(params) {
        return { q: params.term || "" };
      },
      processResults: function(data) {
        if (data.results) {
          return data;
        } else {
          return {
            results: data.map(function(item) {
              return {
                id: item._id || item.id,
                text: item.name || item.text,
                price: item.price || 0
              };
            }),
          };
        }
      },
      cache: true
    }
  });

  // If there's a selected product, set it
  if (selectedProduct) {
    const option = new Option(selectedProduct.name, selectedProduct._id, true, true);
    $(element).append(option).trigger('change');
    
    // Set the price if available
    if (selectedProduct.price) {
      $(element).closest('tr').find('.price-input').val(selectedProduct.price).trigger('change');
    }
  }

  // When a product is selected, populate the price field
  select2.on('select2:select', function(e) {
    const data = e.params.data;
    const row = $(this).closest('tr');
    
    if (data.price) {
      row.find('.price-input').val(data.price).trigger('change');
    }
  });

  return select2;
}
initializeProductSelect2($('#productsTable tbody tr:first-child select[name$="[name]"]'));
  
  // Function to populate form with order data
  function populateFormWithOrderData() {
  if (!serverOrderData) return;
  
  // Basic order info (same as before)
  $('#customerName').val(serverOrderData.name).trigger('change');
  $('#customerCode').val(serverOrderData.customerId).trigger('change');
  $('#truckId').val(serverOrderData.truckId).trigger('change');
  $('#zone').val(serverOrderData.area).trigger('change');
  $('#status').val(serverOrderData.status);
  
  // Products table
  const productsTable = $('#productsTable tbody');
  productsTable.empty();
  
  if (serverOrderData.products && serverOrderData.products.length > 0) {
    serverOrderData.products.forEach((product, index) => {
      const productRow = `
        <tr>
          <td data-label="Product Name">
            <select class="form-control product-select" name="products[${index}][name]" required>
              ${product.productname ? `<option value="${product._id || product.id}" selected>${product.productname}</option>` : ''}
            </select>
          </td>
          <td data-label="Quantity">
            <input type="number" class="form-control quantity-input" name="products[${index}][quantity]" 
                   value="${product.quantity || 1}" min="1" required>
          </td>
          <td data-label="Lend/Return">
            <select class="form-control" name="products[${index}][lrndtype]">
              <option value="Lend" ${product.lendtype === 'Lend' ? 'selected' : ''}>Lend</option>
              <option value="Return" ${product.lendtype === 'Return' ? 'selected' : ''}>Return</option>
            </select>
          </td>
          <td data-label="Unit Price">
            <input type="number" class="form-control price-input" name="products[${index}][price]" 
                   value="${product.price || 0}" min="0" step="0.01" required>
          </td>
          <td data-label="Total" class="total-cell">
            ${(product.quantity * product.price || 0).toFixed(2)}
          </td>
          <td data-label="Action">
            <button type="button" class="btn-remove remove-product">
              <i class="fas fa-times"></i>
            </button>
          </td>
        </tr>
      `;
      productsTable.append(productRow);
      
      // Initialize Select2 with the current product
      const selectElement = productsTable.find('tr:last .product-select');
      initializeProductSelect2(selectElement, {
        _id: product._id || product.id,
        name: product.productname,
        price: product.price
      });
    });
  } else {
    // Add empty row if no products
    addEmptyProductRow();
  }
}
function populateFormWithpaymentdata() {
  if (!serverOrderData) return;
  

  
  // Products table
  const paymentTable = $('#paymentsTable tbody');
  paymentTable.empty();
  
  if (serverOrderData.payments && serverOrderData.payments.length > 0) {
    serverOrderData.payments.forEach((payment, index) => {
      const formattedDate = new Date(payment.createdAt).toLocaleString(); // Formats as "MM/DD/YYYY, HH:MM:SS AM/PM"

      const paymentrow = `
        <tr>
          <td data-label="Product Name">
            ${formattedDate}
          </td>
         
         <td data-label="Product Name">
          ${payment.creditAmountPaid}
          </td>
          <td data-label="Product Name">
            ${payment.salesmanid}
          </td>
         <td data-label="Product Name">
           ${payment.modeOfPayment}
          </td>
        
          <td data-label="Action">
            <button type="button" class="btn-remove remove-product">
              <i class="fas fa-times"></i>
            </button>
          </td>
        </tr>
      `;
      paymentTable.append(paymentrow);
      
      // Initialize Select2 with the current product
      // const selectElement = productsTable.find('tr:last .product-select');
      // initializeProductSelect2(selectElement, {
      //   _id: product._id || product.id,
      //   name: product.productname,
      //   price: product.price
      // });
    });
  } 
}
populateFormWithpaymentdata();

  populateFormWithOrderData();
  
  $(document).on('change', '.quantity-input, .price-input', function() {
    const row = $(this).closest('tr');
    const quantity = parseFloat(row.find('.quantity-input').val()) || 0;
    const price = parseFloat(row.find('.price-input').val()) || 0;
    const total = (quantity * price).toFixed(2);
    row.find('.total-cell').text(total);
    updateOrderSummary();
  });
  $('#addProductBtn').click(function() {
  addEmptyProductRow();
});
  // Add Product Button
  function addEmptyProductRow() {
  const productCount = $('#productsTable tbody tr').length;
  const newRow = `
    <tr>
      <td data-label="Product Name">
        <select class="form-control product-select" name="products[${productCount}][name]" required>
          <option value=""></option>
        </select>
      </td>
      <td data-label="Quantity">
        <input type="number" class="form-control quantity-input" name="products[${productCount}][quantity]" value="1" min="1" required>
      </td>
      <td data-label="Lend/Return">
        <select class="form-control" name="products[${productCount}][lrndtype]">
          <option value="Lend" selected>Lend</option>
          <option value="Return">Return</option>
        </select>
      </td>
      <td data-label="Unit Price">
        <input type="number" class="form-control price-input" name="products[${productCount}][price]" value="0.00" min="0" step="0.01" required>
      </td>
      <td data-label="Total" class="total-cell">
        0.00
      </td>
      <td data-label="Action">
        <button type="button" class="btn-remove remove-product">
          <i class="fas fa-times"></i>
        </button>
      </td>
    </tr>
  `;
  $('#productsTable tbody').append(newRow);
  
  // Initialize Select2 for the new product row
  initializeProductSelect2($('#productsTable tbody tr:last .product-select'));
  
  // Disable remove button if only one row
  // if($('#productsTable tbody tr').length === 1) {
  //   $('.remove-product:first').prop('disabled', true);
  // }
}
  // Remove Product Button
  $(document).on('click', '.remove-product', function() {
    if($('#productsTable tbody tr').length > 0) {
      $(this).closest('tr').remove();
      
      // Disable remove button if only one row left
      if($('#productsTable tbody tr').length === 1) {
        $('.remove-product:first').prop('disabled', true);
      }
      
      updateOrderSummary();
    }
  });
  let payments = [];

  // function addPaymentToTable(payment) {
  //   console.log(payment)
  //   const formattedDate = new Date(payment.date).toLocaleDateString();
  //   const newRow = `
  //     <tr data-payment-id="${payment._id}">
  //       <td data-label="Amount">$${payment.amount}</td>
  //       <td data-label="Method">${payment.method}</td>
  //       <td data-label="Date">${formattedDate}</td>
  //       <td data-label="Action">
  //         <button type="button" class="btn-remove remove-payment" data-payment-id="${payment._id}">
  //           <i class="fas fa-times"></i>
  //         </button>
  //       </td>
  //     </tr>
  //   `;
  //   $('#newPaymentRow').before(newRow);
  //   updateOrderSummary();
  // }
  // Add Payment Button
  $('#addPaymentBtn').click(function() {
    const amount = parseFloat($('#paymentAmount').val());
    const method = $('#paymentMethod').val();
    
    if (!amount || amount <= 0) {
      alert('Please enter a valid payment amount');
      return;
    }

    const paymentData = {
      amountpaid: amount,
      modeOfPayment: method,
      orderId: $('input[name="orderId"]').val() || null,
      paymentDate: new Date(),
      salesmanid:'Admin'
     
    };

    // Show loading state
    $(this).html('<i class="fas fa-spinner fa-spin"></i> Processing...').prop('disabled', true);
    $.ajax({
  url: '/add-payment',
  method: 'POST',
  contentType: 'application/json',
  data: JSON.stringify(paymentData),
  success: function(response) {
    if (response.success && response.payment) {
      // Reload the page after successful payment
      location.reload();
    } else {
      alert(response.message || 'Error processing payment');
    }
  },
  error: function(e) {
    console.log(e.responseJSON.message)
    alert(e.responseJSON.message||'Error occured');
  },
  complete: function() {
    $('#addPaymentBtn').html('<i class="fas fa-plus-circle"></i> Add Payment').prop('disabled', false);
  }
});

  });
    // const paymentCount = $('#paymentsTable tbody tr').length;
    // const today = new Date().toLocaleDateString();
    
    // const newRow = `
    //   <tr>
    //     <td data-label="Payment Date">
    //       <input type="text" class="form-control" name="payments[${paymentCount}][date]" value="${today}" readonly>
    //     </td>
    //     <td data-label="Amount">
    //       <input type="number" class="form-control payment-amount" name="payments[${paymentCount}][amount]" value="0.00" min="0" step="0.01" required>
    //     </td>
    //     <td data-label="Salesman ID">
    //       <input type="text" class="form-control" disabled value="Admin" name="payments[${paymentCount}][salesman]" placeholder="Salesman ID" required>
    //     </td>
    //     <td data-label="Payment Mode">
    //       <select class="form-control" name="payments[${paymentCount}][mode]" required>
    //         <option value="Cash">Cash</option>
    //         <option value="Credit Card">Credit Card</option>
    //         <option value="Bank Transfer">Bank Transfer</option>
    //         <option value="Check">Check</option>
    //       </select>
    //     </td>
    //     <td data-label="Action">
    //       <button type="button" class="btn-remove remove-payment">
    //         <i class="fas fa-times"></i>
    //       </button>
    //     </td>
    //   </tr>
    // `;
    // $('#paymentsTable tbody').append(newRow);


  // Remove Payment Button
  $(document).on('click', '.remove-payment', function() {
    $(this).closest('tr').remove();
    updateOrderSummary();
  });

  // Payment amount change handler

  // Delete Order Button
  $('#deleteOrderBtn').click(function() {
    const orderId = $(this).data('id');
    
    if(confirm('Are you sure you want to delete this order? This action cannot be undone.')) {
      // In a real implementation, this would make an AJAX call to delete the order
      // Then redirect to orders list page
      $.ajax({
        url: `/delete-order/`,
        method: 'POST',
        data: {id:orderId},
        success: function(response) {
          if(response.success) {
            window.location.href = '/orders?success=Order deleted successfully';
          } else {
            alert('Error deleting order: ' + (response.message || 'Unknown error'));
          }
        },
        error: function(xhr) {
          alert('Error deleting order. Please try again.');
        }
      });
      // alert('Order ' + orderId + ' would be deleted (simulated action)');
      // console.log('Order deletion requested for:', orderId);
    }
  });

  // Update Order Summary
  function updateOrderSummary() {
    let subtotal = 0;
    
    // Calculate products subtotal
    $('#productsTable tbody tr').each(function() {
      const quantity = parseFloat($(this).find('.quantity-input').val()) || 0;
      const price = parseFloat($(this).find('.price-input').val()) || 0;
      subtotal += quantity * price;
    });
    
    const total = subtotal ;
    
    // Calculate payments total
    let paymentsTotal = 0;
    // $('.payment-amount').each(function() {
    //   paymentsTotal += parseFloat($(this).val()) || 0;
    // });
    if (Array.isArray(serverOrderData.payments) && serverOrderData.payments.length > 0) {
    serverOrderData.payments.forEach(payment => {
        paymentsTotal += parseFloat(payment.creditAmountPaid) || 0;
    });
}
    const balance = total - paymentsTotal;
    
    // Update summary display
    $('#subtotalAmount').text(subtotal.toFixed(2));
    $('#creditPaidAmount').text(paymentsTotal.toFixed(2));
    $('#totalAmount').text(balance.toFixed(2));
  }

  // Initialize order summary
  updateOrderSummary();

});
</script>

