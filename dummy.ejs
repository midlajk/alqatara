
<%- include('./includes/head.ejs') -%>
<%- include('./includes/navigation.ejs') -%>

<%- include('./includes/header.ejs') -%>

<div class="container-fluid mt--6">
  <div class="row">
    <div class="col-xl-8">
      <div class="card bg-default">
        <div class="card-header bg-transparent">
          <div class="row align-items-center">
            <div class="col">
              <h6 class="text-light text-uppercase ls-1 mb-1">Overview</h6>
              <h5 class="h3 text-white mb-0">Sales value</h5>
            </div>
            <div class="col">
              <ul class="nav nav-pills justify-content-end">
                <li class="nav-item mr-2 mr-md-0" data-toggle="chart" data-target="#chart-sales-dark"
                  data-update='{"data":{"datasets":[{"data":[0, 20, 10, 30, 15, 40, 20, 60, 60]}]}}' data-prefix="$"
                  data-suffix="k">
                  <a href="#" class="nav-link py-2 px-3 active" data-toggle="tab">
                    <span class="d-none d-md-block">Month</span>
                    <span class="d-md-none">M</span>
                  </a>
                </li>
                <li class="nav-item" data-toggle="chart" data-target="#chart-sales-dark"
                  data-update='{"data":{"datasets":[{"data":[0, 20, 5, 25, 10, 30, 15, 40, 40]}]}}' data-prefix="$"
                  data-suffix="k">
                  <a href="#" class="nav-link py-2 px-3" data-toggle="tab">
                    <span class="d-none d-md-block">Week</span>
                    <span class="d-md-none">W</span>
                  </a>
                </li>
              </ul>
            </div>
          </div>
        </div>
        <div class="card-body">
          <!-- Chart -->
          <div class="chart">
            <!-- Chart wrapper -->
            <canvas id="chart-sales-dark" class="chart-canvas"></canvas>
          </div>
        </div>
      </div>
    </div>
    <div class="col-xl-4">
      <div class="card">
        <div class="card-header bg-transparent">
          <div class="row align-items-center">
            <div class="col">
              <h6 class="text-uppercase text-muted ls-1 mb-1">Performance</h6>
              <h5 class="h3 mb-0">Total orders</h5>
            </div>
          </div>
        </div>
        <div class="card-body">
          <!-- Chart -->
          <div class="chart">
            <canvas id="chart-bars" class="chart-canvas"></canvas>
          </div>
        </div>
      </div>
    </div>
  </div>

<%- include('./includes/footer.ejs') -%>

<%- include('./includes/end.ejs') -%>

// exports.updatecustomer = async (req, res) => {
  //   try {
  //     const { id, noOf5galBottles, bottleSecurityDeposit, noOfCoolers, coolerSecurityDeposit, walletBalance, collectedMoney, bottleLendType, coolerLendType } = req.body;
  
  //     // Find the customer first
  //     const customer = await Customer.findOne({ id:id });
  
  //     if (!customer) {
  //       return res.status(404).json({ message: "Customer not found" });
  //     }
  
  //     // Object to hold numeric updates (add to existing values)
  //     const updateNumbers = {};
  //     if (noOf5galBottles) updateNumbers.noOf5galBottles = parseInt(noOf5galBottles);
  //     if (bottleSecurityDeposit) updateNumbers.bottleSecurityDeposit = parseFloat(bottleSecurityDeposit);
  //     if (noOfCoolers) updateNumbers.noOfCoolers = parseInt(noOfCoolers);
  //     if (coolerSecurityDeposit) updateNumbers.coolerSecurityDeposit = parseFloat(coolerSecurityDeposit);
  //     if (walletBalance) updateNumbers.walletBalance = parseFloat(walletBalance);
  //     if (collectedMoney) updateNumbers.collectedMoney = parseFloat(collectedMoney);
  
  //     // Object to hold string updates (replace existing values)
  //     const updateStrings = {};
  //     if (bottleLendType) updateStrings.bottleLendType = bottleLendType;
  //     if (coolerLendType) updateStrings.coolerLendType = coolerLendType;
  
  //     // Perform the update using $inc for numbers and $set for strings
  //     const updatedCustomer = await Customer.findOneAndUpdate(
  //       { id },
  //       { 
  //         ...(Object.keys(updateNumbers).length > 0 && { $inc: updateNumbers }),
  //         ...(Object.keys(updateStrings).length > 0 && { $set: updateStrings }),
  //         $set: { updatedAt: new Date() } // Always update timestamp
  //       },
  //       { new: true }
  //     );
  
  //     res.status(200).json({ message: "Customer updated successfully", updatedCustomer });
  //   } catch (error) {
  //     console.error("Update error:", error);
  //     res.status(500).json({ message: "Error updating customer", error });
  //   }
  // }



  index page 

  ...1
  <div class="col-xl-3">
    <div class="card">
        <div class="card-header bg-transparent">
            <div class="row align-items-center">
                <div class="col">
                    <h6 class="text-uppercase text-muted ls-1 mb-1">Truck <span id="selectedtruck"></span></h6>
                    <!-- <h5 class="h3 text-white mb-0">Sales value</h5> -->
                </div>
            </div>
        </div>
        <style>
          .card-body {
font-family: Arial, sans-serif;
}

#searchTruck {
margin-bottom: 10px;
}

#truckContainer > div:hover {
background-color: #f0f0f0;
}

        </style>
        <!-- <div class="card-body" style="height: 50vh;">
          <div style="width: 100%;height: 70px;border-radius: 5px;box-shadow: 2px 1px 5px;margin-bottom: 5px;padding: 10px;">

              <label for="">Truck Id</label> <br>
              <label for="">Sales Person</label>

          </div>
          <div style="width: 100%;height: 70px;border-radius: 5px;box-shadow: 2px 1px 5px;margin-bottom: 5px;padding: 10px;">

              <label for="">Truck Id</label> <br>
              <label for="">Sales Person</label>
          </div>
        </div> -->
        <div class="card-body" style="height: 50vh; overflow-y: auto;">
          <div style="margin-bottom: 10px;">
            <input
              type="text"
              id="searchTruck"
              placeholder="Search Truck ID"
              style="width: 100%; padding: 8px; border-radius: 5px; border: 1px solid #ccc;"
            />
          </div>
          <div id="truckContainer">
            <!-- Truck cards will be dynamically appended here -->
          </div>
        </div>
    </div>
</div>
<script>
  // Fetch trucks from the backend and render them
  async function fetchTrucks(searchQuery = "",) {
    try {
      const city = document.getElementById("city").value
      const response = await fetch(`/gettrucknames?search=${searchQuery}&city=${city}&customKey=utilities`);
      const trucks = await response.json();
      const truckContainer = document.getElementById("truckContainer");
      truckContainer.innerHTML = ""; // Clear previous data

      trucks.forEach((truck) => {
        const truckDiv = document.createElement("div");
        truckDiv.style.cssText =
          "width: 100%; height: 70px; border-radius: 5px; box-shadow: 2px 1px 5px; margin-bottom: 5px; padding: 10px; cursor: pointer;";
         
        truckDiv.onclick = () => {
          document.getElementById('selectedtruck').innerText = ' - '+ truck.id;
          fetchDashboardData(truck.id)};

        truckDiv.innerHTML = `
          <label>Truck ID: ${truck.id}</label> <br>
          <label>Sales Person ID: ${truck.salesmanId || "N/A"}</label>
        `;
        truckContainer.appendChild(truckDiv);
      });
    } catch (error) {
      console.error("Error fetching trucks:", error);
    }
  }

  // Call this function when the page loads
  document.addEventListener("DOMContentLoaded", () => fetchTrucks());

  // Add search functionality
  // document.getElementById("searchTruck").addEventListener("input", (event) => {
  //   const searchQuery = event.target.value;
  //   fetchTrucks(searchQuery);
  // });

  // // Example function for handling truck dashboard display
  // function showDashboard(truckId) {
  //   alert(`Showing dashboard for Truck ID: ${truckId}`);
  //   // Add logic to redirect or display the truck dashboard
  // }
  // document.addEventListener("DOMContentLoaded", () => fetchTrucks());

// Update truck list when city selection changes



</script>
...1

...2
<div class="col-xl-4">
  <div class="card">
      <div class="card-header bg-transparent">
          <div class="row align-items-center">
              <div class="col">
                  <h6 class="text-uppercase text-muted ls-1 mb-1">Performance</h6>
                  <h5 class="h3 mb-0">Total orders</h5>
              </div>
          </div>
      </div>
      <div class="card-body">
          <!-- Chart -->
          <div class="chart">
              <canvas id="chart-bar" class="chart-canvas"></canvas>
          </div>
      </div>
  </div>
</div>
...2